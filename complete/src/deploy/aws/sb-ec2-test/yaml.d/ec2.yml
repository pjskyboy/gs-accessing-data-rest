AWSTemplateFormatVersion: '2010-09-09'
Description: 'Build a VPC and a pair of EC2 instances across the a and b AZs'
Parameters:
  projectName:
    Description: "Project name to tag resources with using the ProjectName tag"
    Type: "String"
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: "projectName"
  networkStackName:
    Description: "Name of the active network stack to reference for dependencies e.g. vpc id"
    Type: "String"
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: "networkStackName"
  amiId:
    Description: "Supplied AMI Id"
    Type: "String"
  keyPair:
    Description: "Supplied Key Pair name"
    Type: "AWS::EC2::KeyPair::KeyName"
  ownerId:
    Description: "Supplied Owner Id (Account Id)"
    Type: "String"
Resources:
  ec2A:
      Type: 'AWS::EC2::Instance'
      Properties:
        DisableApiTermination: 'false'
        InstanceInitiatedShutdownBehavior: stop
        ImageId:
          Ref: amiId
        InstanceType: t2.micro
        KeyName:
          Ref: keyPair
        Monitoring: 'false'
        Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "ec2A" ] ]}}]
        NetworkInterfaces:
          -
            DeleteOnTermination: 'true'
            DeviceIndex: 0
            SubnetId:
              "Fn::ImportValue":
                "Fn::Sub": "${networkStackName}-subnetA"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "172.31.4.176"
                Primary: 'true'
            GroupSet:
              - Ref: ec2SecurityGroup
            AssociatePublicIpAddress: 'true'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            #${projectName} - keeps sub function happy
            /usr/bin/yum -y install java-1.8.0
            /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java

            cd /home/ec2-user
            sudo -bn -u ec2-user -s /usr/bin/java -jar gs-accessing-data-rest-0.1.0.jar 2>&1 > gs-accessing-data-rest-0.1.0.log
            chown ec2-user:ec2-user gs-accessing-data-rest-0.1.0.log
  ec2B:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId:
        Ref: amiId
      InstanceType: t2.micro
      KeyName:
        Ref: keyPair
      Monitoring: 'false'
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "ec2B" ] ]}}]
      NetworkInterfaces:
        -
          DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId:
            "Fn::ImportValue":
              "Fn::Sub": "${networkStackName}-subnetB"
          PrivateIpAddresses:
            -
              PrivateIpAddress: "172.31.27.192"
              Primary: 'true'
          GroupSet:
            - Ref: ec2SecurityGroup
          AssociatePublicIpAddress: 'true'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          #${projectName} - keeps sub function happy
          /usr/bin/yum -y install java-1.8.0
          /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java

          cd /home/ec2-user
          sudo -bn -u ec2-user -s /usr/bin/java -jar gs-accessing-data-rest-0.1.0.jar 2>&1 > gs-accessing-data-rest-0.1.0.log
          chown ec2-user:ec2-user gs-accessing-data-rest-0.1.0.log
  ec2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'EC2 security group'
      VpcId:
        "Fn::ImportValue":
          "Fn::Sub": "${networkStackName}-vpcId"
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "ec2-sg" ] ]}}]
  loadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Load balancer security group'
      VpcId:
        "Fn::ImportValue":
          "Fn::Sub": "${networkStackName}-vpcId"
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "lb-sg" ] ]}}]
  rdsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for RDS access from EC2 instances"
      VpcId:
        "Fn::ImportValue":
          "Fn::Sub": "${networkStackName}-vpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: ec2SecurityGroup
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "sg" ] ]}}]

# Ingress from load balancer security group to EC2 application port 8080
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId:
        Ref: ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId:
        Ref: loadBalancerSecurityGroup
      SourceSecurityGroupOwnerId:
        Ref: ownerId
# ingress from a specific IP CIDR to EC2 instances port 8080
  ingress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId:
        Ref: ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      CidrIp: 82.10.149.166/32
# ingress from a specific IP CIDR to EC2 instances port 22
  ingress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId:
        Ref: ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 82.10.149.166/32
# allows access from a specific IP
  ingress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId:
        Ref: loadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 82.10.149.166/32
# egress traffic from instances
  egress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId:
        Ref: ec2SecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
# egress from LB
  egress2:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId:
        Ref: loadBalancerSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  targetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 8080
      Protocol: HTTP
      HealthCheckPath: /profile
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "tg" ] ]}}]
      Targets:
        - Id:
            Ref: ec2A
        - Id:
            Ref: ec2B
      VpcId:
        "Fn::ImportValue":
          "Fn::Sub": "${networkStackName}-vpcId"
  loadbalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Ref: loadBalancerSecurityGroup
      Subnets:
        - "Fn::ImportValue":
            "Fn::Sub": "${networkStackName}-subnetA"
        - "Fn::ImportValue":
            "Fn::Sub": "${networkStackName}-subnetB"
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "lb" ] ]}}]
  listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: targetGroup
      LoadBalancerArn:
        Ref: loadbalancer
      Port: 80
      Protocol: HTTP
  ebsA:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: 100
      VolumeType: standard
      AvailabilityZone:
        !GetAtt ec2A.AvailabilityZone
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "ebsA" ] ]}}]
  ebsAMountPoint:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      InstanceId:
        Ref: ec2A
      VolumeId:
        Ref: ebsA
      Device: /dev/xvdh
  ebsB:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: 100
      VolumeType: standard
      AvailabilityZone:
        !GetAtt ec2B.AvailabilityZone
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "ebsB" ] ]}}]
  ebsBMountPoint:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      InstanceId:
        Ref: ec2B
      VolumeId:
        Ref: ebsB
      Device: /dev/xvdh

Outputs:
  rdsSecurityGroup:
    Description: "RDS Security Group"
    Value:
      Ref: rdsSecurityGroup
    Export:
      Name:
        "Fn::Sub": "${AWS::StackName}-rdsSecurityGroup"
