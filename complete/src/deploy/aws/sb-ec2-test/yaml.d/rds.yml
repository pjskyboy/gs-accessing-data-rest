AWSTemplateFormatVersion: "2010-09-09"
Description: "RDS Aurora HA DB across AZ A and B"
Parameters:
  projectName:
    Description: "Project name to tag resources with using the ProjectName tag"
    Type: "String"
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: "projectName"
  networkStackName:
    Description: "Name of the active network stack to reference for dependencies e.g. vpc"
    Type: "String"
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: "networkStackName"
  azRoot:
    Description: "Availability Zone root e.g. eu-west-1 - will be suffixed for each AZ used a,b,c, etc"
    Type: "String"
    Default: "Unknown"
  DBName:
    Description: "The database name"
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
    Default: ec2appdb
  clusterUsername:
    Description: "The cluster endpoint username"
    Type: String
    Default: ec2appdbo
  clusterPassword:
    Description: "The cluster endpoint password - no default"
    Type: String
      
Resources:
  auroraMaster:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier:
        Ref: auroraCluster
      DBInstanceClass: db.t2.small
      DBSubnetGroupName:
        "Fn::ImportValue":
          "Fn::Sub": "${networkStackName}-dbSubnetGroup"
      Engine: aurora
      EngineVersion: 5.6
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "aurora-master" ] ]}}]

  auroraReadReplica:
    Type: "AWS::RDS::DBInstance"
    Properties:
      # same cluster as the master db
      DBClusterIdentifier:
        Ref: auroraCluster
      DBInstanceClass: db.t2.small
      Engine: aurora
      EngineVersion: 5.6
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "aurora-read-replica" ] ]}}]

  auroraCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      AvailabilityZones:
        - "Fn::Sub": "${azRoot}a"
        - "Fn::Sub": "${azRoot}b"
      DatabaseName:
        Ref: DBName
      DBSubnetGroupName:
        "Fn::ImportValue":
          "Fn::Sub": "${networkStackName}-dbSubnetGroup"
      Engine: aurora
      EngineVersion: 5.6
      MasterUsername:
        Ref: clusterUsername
      MasterUserPassword:
        Ref: clusterPassword
      Port: 3306
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "aurora-cluster" ] ]}}]
      VpcSecurityGroupIds:
        - Ref: rdsSecurityGroup

  rdsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for RDS access from EC2 instances"
      VpcId:
        "Fn::ImportValue":
          "Fn::Sub": "${networkStackName}-vpcId"
      SecurityGroupIngress:
        # specific CIDR access to 3306
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 82.10.149.166/32
      Tags: [{Key: ProjectName, Value: {Ref: projectName}}, {Key: Name, Value: {"Fn::Join": [ "-", [ Ref: projectName, "rds-sg" ] ]}}]

Outputs:
  rdsSecurityGroup:
    Description: "RDS Security Group"
    Value:
      Ref: rdsSecurityGroup
    Export:
      Name:
        "Fn::Sub": "${AWS::StackName}-rdsSecurityGroup"

  clusterJDBCConnectionString:
    Description: "JDBC connection string for the cluster endpoint"
    Value:
      "Fn::Join":
        - ""
        -
          - "jdbc:mysql://"
          - !GetAtt auroraCluster.Endpoint.Address
          - ":"
          - !GetAtt auroraCluster.Endpoint.Port
          - "/"
          - Ref: DBName
    Export:
      Name:
        "Fn::Sub": "${AWS::StackName}-clusterJDBCConnectionString"

  clusterUsername:
    Description: "Cluster username"
    Value:
      Ref: clusterUsername
    Export:
      Name:
        "Fn::Sub": "${AWS::StackName}-clusterUsername"

  clusterPassword:
    Description: "Cluster password"
    Value:
      Ref: clusterPassword
    Export:
      Name:
        "Fn::Sub": "${AWS::StackName}-clusterPassword"
